SQL> 
SQL> -- Step#1 - [6 points] This step requires that you use the query from Lab #10 that you used to insert records into the RENTAL table. You need to put it inside the USING clause of the MERGE statement as the query, resolve which columns you use in an UPDATE statement, and resolve which columns you use in an INSERT statement.
SQL> 
SQL> MERGE INTO rental_lab target
  2  USING (
  3    SELECT DISTINCT r.rental_lab_id
  4    ,      c.contact_lab_id
  5    ,      TRUNC(tu.check_out_date) AS check_out_date
  6    ,      TRUNC(tu.return_date) AS return_date
  7    ,      1 AS created_by
  8    ,      TRUNC(SYSDATE) AS creation_date
  9    ,      1 AS last_updated_by
 10    ,      TRUNC(SYSDATE) AS last_update_date
 11    FROM member_lab m
 12    INNER JOIN contact_lab c ON m.member_lab_id = c.member_lab_id
 13    INNER JOIN transaction_upload tu ON c.first_name = tu.first_name
 14    AND  NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 15    AND  c.last_name = tu.last_name
 16    AND  tu.account_number = m.account_number
 17    LEFT JOIN rental_lab r ON c.contact_lab_id = r.customer_id
 18    AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 19    AND  TRUNC(tu.return_date) = TRUNC(r.return_date)
 20  ) source
 21  ON (target.rental_lab_id = source.rental_lab_id)
 22  WHEN MATCHED THEN
 23  UPDATE SET target.last_updated_by = source.last_updated_by
 24  ,		target.last_update_date = source.last_update_date
 25  WHEN NOT MATCHED THEN
 26  INSERT VALUES
 27  (
 28  	    rental_lab_s1.nextval
 29  ,	    source.contact_lab_id
 30  ,	    source.check_out_date
 31  ,	    source.return_date
 32  ,	    source.created_by
 33  ,	    source.creation_date
 34  ,	    source.last_updated_by
 35  ,	    source.last_update_date
 36  );

4681 rows merged.

SQL> 
SQL> 
SQL> 
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Rental after merge"
  2  FROM     rental_lab;

Rental                                                                          
-------                                                                         
  4,689                                                                         

1 row selected.

SQL> 
SQL> -- Step#2 - [6 points] This step requires that the preceding MERGE statement ran successfully and that you use the query from Lab #10 that you used to insert records into the RENTAL_ITEM table. You need to put it inside the USING clause of the MERGE statement as the query, resolve which columns you use in an UPDATE statement, and resolve which columns you use in an INSERT statement.
SQL> 
SQL> MERGE INTO rental_item_lab target
  2  USING (
  3    SELECT	ri.rental_item_lab_id
  4    ,	r.rental_lab_id
  5    ,	tu.item_id
  6    ,	TRUNC(r.return_date) - TRUNC(r.check_out_date) AS rental_item_lab_price
  7    ,	cl.common_lookup_lab_id AS rental_item_lab_type
  8    ,	1 AS created_by
  9    ,	TRUNC(SYSDATE) AS creation_date
 10    ,	1 AS last_updated_by
 11    ,	TRUNC(SYSDATE) AS last_update_date
 12    FROM member_lab m INNER JOIN contact_lab c
 13    ON   m.member_lab_id = c.member_lab_id INNER JOIN transaction_upload tu
 14    ON   c.first_name = tu.first_name
 15    AND  NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 16    AND  c.last_name = tu.last_name
 17    AND  tu.account_number = m.account_number INNER JOIN common_lookup_lab cl
 18    ON cl.common_lookup_lab_type = tu.rental_item_type
 19    AND cl.common_lookup_lab_table = 'RENTAL_ITEM_LAB' LEFT JOIN rental_lab r
 20    ON   c.contact_lab_id = r.customer_id
 21    AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 22    AND TRUNC(tu.return_date) = TRUNC(r.return_date)
 23    LEFT JOIN rental_item_lab ri ON ri.rental_lab_id = r.rental_lab_id
 24  ) source
 25  ON (target.rental_item_lab_id = source.rental_item_lab_id)
 26  WHEN MATCHED THEN
 27  UPDATE SET target.last_updated_by = source.last_updated_by
 28  	     , target.last_update_date = source.last_update_date
 29  WHEN NOT MATCHED THEN
 30  INSERT VALUES
 31  (
 32    rental_item_lab_s1.nextval
 33    , source.rental_lab_id
 34    , source.item_id
 35    , source.created_by
 36    , source.creation_date
 37    , source.last_updated_by
 38    , source.last_update_date
 39    , source.rental_item_lab_price
 40    , source.rental_item_lab_type
 41  );

38720 rows merged.

SQL> 
SQL> 
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Rental Item after merge"
  2  FROM     rental_item_lab;

Rental                                                                          
-------                                                                         
 11,533                                                                         

1 row selected.

SQL> 
SQL> 
SQL> -- Step#3 - [6 points] This step requires that the preceding MERGE statement ran successfully and that you use the query from Lab #10 that you used to insert records into the TRANSACTION table. You need to put it inside the USING clause of the MERGE statement as the query, resolve which columns you use in an UPDATE statement, and resolve which columns you use in an INSERT statement.
SQL> 
SQL> 
SQL> MERGE INTO transaction target
  2  USING (
  3    SELECT t.transaction_id AS transaction_id
  4    ,      tu.account_number AS transaction_account
  5    ,      cl1.common_lookup_lab_id AS transaction_type
  6    ,      TRUNC(tu.transaction_date) AS transaction_date
  7    ,      SUM(tu.transaction_amount) AS transaction_amount
  8    ,      r.rental_lab_id
  9    ,      cl2.common_lookup_lab_id AS payment_method_type
 10    ,      tu.payment_account_number
 11    ,      1 AS created_by
 12    ,      TRUNC(SYSDATE) AS creation_date
 13    ,      1 AS last_updated_by
 14    ,      TRUNC(SYSDATE) AS last_update_date
 15    FROM member_lab m
 16    INNER JOIN contact_lab c ON   m.member_lab_id = c.member_lab_id
 17    INNER JOIN transaction_upload tu ON   c.first_name = tu.first_name
 18    AND  NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 19    AND  c.last_name = tu.last_name
 20    AND  tu.account_number = m.account_number
 21    INNER JOIN rental_lab r ON   c.contact_lab_id = r.customer_id
 22    AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 23    AND  TRUNC(tu.return_date) = TRUNC(r.return_date)
 24    INNER JOIN common_lookup_lab cl1 ON	cl1.common_lookup_lab_table = 'TRANSACTION'
 25    AND     cl1.common_lookup_lab_column = 'TRANSACTION_TYPE'
 26    AND     cl1.common_lookup_lab_type = tu.transaction_type
 27    INNER JOIN common_lookup_lab cl2 ON	cl2.common_lookup_lab_table = 'TRANSACTION'
 28    AND     cl2.common_lookup_lab_column = 'PAYMENT_METHOD_TYPE'
 29    AND     cl2.common_lookup_lab_type = tu.payment_method_type
 30    LEFT JOIN transaction t ON t.TRANSACTION_ACCOUNT = tu.payment_account_number
 31    AND t.TRANSACTION_TYPE = cl1.common_lookup_lab_id
 32    AND t.TRANSACTION_DATE = tu.transaction_date
 33    AND t.TRANSACTION_AMOUNT = tu.TRANSACTION_AMOUNT
 34    AND t.PAYMENT_METHOD_type = cl2.common_lookup_lab_id
 35    AND t.PAYMENT_ACCOUNT_NUMBER = tu.payment_account_number
 36    GROUP BY t.transaction_id
 37    , tu.account_number
 38    , cl1.common_lookup_lab_id
 39    , tu.transaction_date
 40    , r.rental_lab_id
 41    , cl2.common_lookup_lab_id
 42    , tu.payment_account_number
 43  ) source
 44  ON (target.transaction_id = source.transaction_id)
 45  WHEN MATCHED THEN
 46  UPDATE SET target.last_updated_by = source.last_updated_by
 47  ,		target.last_update_date = source.last_update_date
 48  WHEN NOT MATCHED THEN
 49  INSERT VALUES
 50  (
 51  	 transaction_s1.nextval
 52    , source.transaction_account
 53    , source.transaction_type
 54    , source.transaction_date
 55    , source.transaction_amount
 56    , source.rental_lab_id
 57    , source.payment_method_type
 58    , source.payment_account_number
 59    , source.created_by
 60    , source.creation_date
 61    , source.last_updated_by
 62    , source.last_update_date
 63  );

4681 rows merged.

SQL> 
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Transaction after merge"
  2  FROM     transaction;

Transac                                                                         
-------                                                                         
  9,362                                                                         

1 row selected.

SQL> 
SQL> 
SQL> -- Step#4 - [12 points] After running the first three steps, you need to put the three MERGE statement into a single upload_transaction procedure. Then, you need to run the upload_transaction procedure, run a validation query, run the upload_transaction procedure a second time, and run a validation query again.
SQL> 
SQL> -- 4a - [4 points of 12 points] After running the first three steps, you need to put the three MERGE statement into a single upload_transaction procedure.
SQL> 
SQL> -- Create a procedure to wrap the transaction.
SQL> CREATE OR REPLACE PROCEDURE upload_transaction IS
  2  BEGIN
  3    -- Set save point for an all or nothing transaction.
  4    SAVEPOINT starting_point;
  5  
  6    -- Merge into RENTAL table.
  7    MERGE INTO rental_lab target
  8    USING (
  9    SELECT DISTINCT r.rental_lab_id
 10    ,      c.contact_lab_id
 11    ,      TRUNC(tu.check_out_date) AS check_out_date
 12    ,      TRUNC(tu.return_date) AS return_date
 13    ,      1 AS created_by
 14    ,      TRUNC(SYSDATE) AS creation_date
 15    ,      1 AS last_updated_by
 16    ,      TRUNC(SYSDATE) AS last_update_date
 17    FROM member_lab m
 18    INNER JOIN contact_lab c ON m.member_lab_id = c.member_lab_id
 19    INNER JOIN transaction_upload tu ON c.first_name = tu.first_name
 20    AND  NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 21    AND  c.last_name = tu.last_name
 22    AND  tu.account_number = m.account_number
 23    LEFT JOIN rental_lab r ON c.contact_lab_id = r.customer_id
 24    AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 25    AND  TRUNC(tu.return_date) = TRUNC(r.return_date)
 26    ) source
 27    ON (target.rental_lab_id = source.rental_lab_id)
 28    WHEN MATCHED THEN
 29    UPDATE SET target.last_updated_by = source.last_updated_by
 30    ,	  target.last_update_date = source.last_update_date
 31    WHEN NOT MATCHED THEN
 32    INSERT VALUES
 33    (
 34    rental_lab_s1.nextval
 35    ,      source.contact_lab_id
 36    ,      source.check_out_date
 37    ,      source.return_date
 38    ,      source.created_by
 39    ,      source.creation_date
 40    ,      source.last_updated_by
 41    ,      source.last_update_date
 42    );
 43  
 44    -- Merge into RENTAL_ITEM table.
 45    MERGE INTO rental_item_lab target
 46    USING (
 47    SELECT	ri.rental_item_lab_id
 48    ,	r.rental_lab_id
 49    ,	tu.item_id
 50    ,	TRUNC(r.return_date) - TRUNC(r.check_out_date) AS rental_item_lab_price
 51    ,	cl.common_lookup_lab_id AS rental_item_lab_type
 52    ,	1 AS created_by
 53    ,	TRUNC(SYSDATE) AS creation_date
 54    ,	1 AS last_updated_by
 55    ,	TRUNC(SYSDATE) AS last_update_date
 56    FROM member_lab m INNER JOIN contact_lab c
 57    ON   m.member_lab_id = c.member_lab_id INNER JOIN transaction_upload tu
 58    ON   c.first_name = tu.first_name
 59    AND  NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 60    AND  c.last_name = tu.last_name
 61    AND  tu.account_number = m.account_number INNER JOIN common_lookup_lab cl
 62    ON cl.common_lookup_lab_type = tu.rental_item_type
 63    AND cl.common_lookup_lab_table = 'RENTAL_ITEM_LAB' LEFT JOIN rental_lab r
 64    ON   c.contact_lab_id = r.customer_id
 65    AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 66    AND TRUNC(tu.return_date) = TRUNC(r.return_date)
 67    LEFT JOIN rental_item_lab ri ON ri.rental_lab_id = r.rental_lab_id
 68    ) source
 69    ON (target.rental_item_lab_id = source.rental_item_lab_id)
 70    WHEN MATCHED THEN
 71    UPDATE SET target.last_updated_by = source.last_updated_by
 72    ,	  target.last_update_date = source.last_update_date
 73    WHEN NOT MATCHED THEN
 74    INSERT VALUES
 75    (
 76    rental_item_lab_s1.nextval
 77    , source.rental_lab_id
 78    , source.item_id
 79    , source.created_by
 80    , source.creation_date
 81    , source.last_updated_by
 82    , source.last_update_date
 83    , source.rental_item_lab_price
 84    , source.rental_item_lab_type
 85    );
 86  
 87    -- Merge into TRANSACTION table.
 88    MERGE INTO transaction target
 89    USING (
 90    SELECT t.transaction_id AS transaction_id
 91    ,      tu.account_number AS transaction_account
 92    ,      cl1.common_lookup_lab_id AS transaction_type
 93    ,      TRUNC(tu.transaction_date) AS transaction_date
 94    ,      SUM(tu.transaction_amount) AS transaction_amount
 95    ,      r.rental_lab_id
 96    ,      cl2.common_lookup_lab_id AS payment_method_type
 97    ,      tu.payment_account_number
 98    ,      1 AS created_by
 99    ,      TRUNC(SYSDATE) AS creation_date
100    ,      1 AS last_updated_by
101    ,      TRUNC(SYSDATE) AS last_update_date
102    FROM member_lab m
103    INNER JOIN contact_lab c ON   m.member_lab_id = c.member_lab_id
104    INNER JOIN transaction_upload tu ON   c.first_name = tu.first_name
105    AND  NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
106    AND  c.last_name = tu.last_name
107    AND  tu.account_number = m.account_number
108    INNER JOIN rental_lab r ON   c.contact_lab_id = r.customer_id
109    AND  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
110    AND  TRUNC(tu.return_date) = TRUNC(r.return_date)
111    INNER JOIN common_lookup_lab cl1 ON	cl1.common_lookup_lab_table = 'TRANSACTION'
112    AND     cl1.common_lookup_lab_column = 'TRANSACTION_TYPE'
113    AND     cl1.common_lookup_lab_type = tu.transaction_type
114    INNER JOIN common_lookup_lab cl2 ON	cl2.common_lookup_lab_table = 'TRANSACTION'
115    AND     cl2.common_lookup_lab_column = 'PAYMENT_METHOD_TYPE'
116    AND     cl2.common_lookup_lab_type = tu.payment_method_type
117    LEFT JOIN transaction t ON t.TRANSACTION_ACCOUNT = tu.payment_account_number
118    AND t.TRANSACTION_TYPE = cl1.common_lookup_lab_id
119    AND t.TRANSACTION_DATE = tu.transaction_date
120    AND t.TRANSACTION_AMOUNT = tu.TRANSACTION_AMOUNT
121    AND t.PAYMENT_METHOD_type = cl2.common_lookup_lab_id
122    AND t.PAYMENT_ACCOUNT_NUMBER = tu.payment_account_number
123    GROUP BY t.transaction_id
124    , tu.account_number
125    , cl1.common_lookup_lab_id
126    , tu.transaction_date
127    , r.rental_lab_id
128    , cl2.common_lookup_lab_id
129    , tu.payment_account_number
130    ) source
131    ON (target.transaction_id = source.transaction_id)
132    WHEN MATCHED THEN
133    UPDATE SET target.last_updated_by = source.last_updated_by
134    ,	  target.last_update_date = source.last_update_date
135    WHEN NOT MATCHED THEN
136    INSERT VALUES
137    (
138    transaction_s1.nextval
139    , source.transaction_account
140    , source.transaction_type
141    , source.transaction_date
142    , source.transaction_amount
143    , source.rental_lab_id
144    , source.payment_method_type
145    , source.payment_account_number
146    , source.created_by
147    , source.creation_date
148    , source.last_updated_by
149    , source.last_update_date
150    );
151  
152    -- Save the changes.
153    COMMIT;
154  
155  EXCEPTION
156    WHEN OTHERS THEN
157  	 ROLLBACK TO starting_point;
158  	 RETURN;
159  END;
160  /

Procedure created.

SQL> 
SQL> SHOW ERRORS
No errors.
SQL> 
SQL> -- 4b - [2 points of 12 points] You run the upload_transaction procedure with the following syntax:
SQL> EXECUTE upload_transaction;

PL/SQL procedure successfully completed.

SQL> 
SQL> -- 4c - [2 points of 12 points] You should use the following to query the results from procedure.
SQL> COLUMN rental_count      FORMAT 99,999 HEADING "Rental|Count"
SQL> COLUMN rental_item_count FORMAT 99,999 HEADING "Rental|Item|Count"
SQL> COLUMN transaction_count FORMAT 99,999 HEADING "Transaction|Count"
SQL> 
SQL> SELECT   il1.rental_count
  2    ,	il2.rental_item_count
  3    ,	il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental_lab) il1 CROSS JOIN
  5    (SELECT COUNT(*) AS rental_item_count FROM rental_item_lab) il2 CROSS JOIN
  6    (SELECT COUNT(*) AS transaction_count FROM transaction) il3;

         Rental                                                                 
 Rental    Item Transaction                                                     
  Count   Count       Count                                                     
------- ------- -----------                                                     
  4,689  11,533      14,043                                                     

1 row selected.

SQL> 
SQL> 
SQL> -- 4d - [2 points of 12 points] You re-run the upload_transaction procedure with the following syntax:
SQL> 
SQL> EXECUTE upload_transaction;

PL/SQL procedure successfully completed.

SQL> 
SQL> -- 4e - [2 points of 12 points] You should reuse the following to query the results from procedure.
SQL> 
SQL> COLUMN rental_count      FORMAT 99,999 HEADING "Rental|Count"
SQL> COLUMN rental_item_count FORMAT 99,999 HEADING "Rental|Item|Count"
SQL> COLUMN transaction_count FORMAT 99,999 HEADING "Transaction|Count"
SQL> 
SQL> SELECT   il1.rental_count
  2    ,	il2.rental_item_count
  3    ,	il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental_lab) il1 CROSS JOIN
  5    (SELECT COUNT(*) AS rental_item_count FROM rental_item_lab) il2 CROSS JOIN
  6    (SELECT COUNT(*) AS transaction_count FROM TRANSACTION) il3;

         Rental                                                                 
 Rental    Item Transaction                                                     
  Count   Count       Count                                                     
------- ------- -----------                                                     
  4,689  11,533      18,724                                                     

1 row selected.

SQL> 
SQL> 
SQL> -- Step#5 - [5 points] Create a query that prints the following types of data for the year 2009, which is only possible when you adjust for the included 6% interest. You need to make that adjustment inside the third merge statement’s SELECT clause.
SQL> SELECT  tr.MONTH
  2  ,	     tr.BASE_REVENUE
  3  ,	     tr.ten_plus AS "10_PLUS"
  4  ,	     tr.twenty_plus AS "20_PLUS"
  5  ,	     tr.ten_plus_less_b AS "10_PLUS_LESS_B"
  6  ,	     tr.twenty_plus_less_b AS "20_PLUS_LESS_B"
  7  FROM (
  8  	     SELECT CONCAT(TO_CHAR(t.transaction_Date,'MON'),CONCAT('-',EXTRACT(YEAR FROM t.transaction_date))) AS MONTH
  9  	     ,	     EXTRACT(MONTH FROM TRUNC(t.transaction_date)) AS sortkey
 10  	     ,	     TO_CHAR(SUM(t.transaction_amount),'$9,999,999.00') AS BASE_REVENUE
 11  	     ,	     TO_CHAR(SUM(t.transaction_amount + (t.transaction_amount * .1)),'$9,999,999.00') AS ten_plus
 12  	     ,	     TO_CHAR(SUM(t.transaction_amount + (t.transaction_amount * .2)),'$9,999,999.00') AS twenty_plus
 13  	     ,	     TO_CHAR(SUM(t.transaction_amount + (t.transaction_amount * .1)) -
 14  			     SUM(t.transaction_amount),'$9,999,999.00') AS ten_plus_less_b
 15  	     ,	     TO_CHAR(SUM(t.transaction_amount + (t.transaction_amount * .2)) -
 16  			     SUM(t.transaction_amount),'$9,999,999.00') AS twenty_plus_less_b
 17  	     FROM transaction t
 18  	     WHERE EXTRACT(YEAR FROM TRUNC(t.transaction_date)) = 2009
 19  	     GROUP BY CONCAT(TO_CHAR(t.transaction_Date,'MON'),CONCAT('-',EXTRACT(YEAR FROM t.transaction_date)))
 20  	     , EXTRACT(MONTH FROM TRUNC(t.transaction_date))
 21  ) tr
 22  ORDER BY tr.sortkey;

MONTH                                                 BASE_REVENUE              
----------------------------------------------------- --------------            
10_PLUS        20_PLUS        10_PLUS_LESS_B 20_PLUS_LESS_B                     
-------------- -------------- -------------- --------------                     
JAN-2009                                                  $10,684.80            
    $11,753.28     $12,821.76      $1,068.48      $2,136.96                     
                                                                                
FEB-2009                                                  $17,082.96            
    $18,791.26     $20,499.55      $1,708.30      $3,416.59                     
                                                                                
MAR-2009                                                  $21,484.08            
    $23,632.49     $25,780.90      $2,148.41      $4,296.82                     
                                                                                
APR-2009                                                  $19,728.72            
    $21,701.59     $23,674.46      $1,972.87      $3,945.74                     
                                                                                
MAY-2009                                                   $8,865.84            
     $9,752.42     $10,639.01        $886.58      $1,773.17                     
                                                                                
JUN-2009                                                   $4,833.60            
     $5,316.96      $5,800.32        $483.36        $966.72                     
                                                                                
JUL-2009                                                   $9,616.32            
    $10,577.95     $11,539.58        $961.63      $1,923.26                     
                                                                                
AUG-2009                                                   $8,967.60            
     $9,864.36     $10,761.12        $896.76      $1,793.52                     
                                                                                
SEP-2009                                                   $8,789.52            
     $9,668.47     $10,547.42        $878.95      $1,757.90                     
                                                                                
OCT-2009                                                  $13,101.60            
    $14,411.76     $15,721.92      $1,310.16      $2,620.32                     
                                                                                
NOV-2009                                                  $12,503.76            
    $13,754.14     $15,004.51      $1,250.38      $2,500.75                     
                                                                                
DEC-2009                                                   $9,361.92            
    $10,298.11     $11,234.30        $936.19      $1,872.38                     
                                                                                

12 rows selected.

SQL> 
SQL> SPOOL OFF

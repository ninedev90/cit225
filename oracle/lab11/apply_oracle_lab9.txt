SQL> 
SQL> -- Step#1 - [4 points] Create the following TRANSACTION table as per the specification, but do so understanding the business logic of the model. After creating the TRANSACTION table, create a unique index on the columns that make up the natural key and call it the NATURAL_KEY index.
SQL> 
SQL> --Step #1a - You create the TRANSACTION table and a TRANSACTION_S1 sequence as qualified below.
SQL> 
SQL> ------------
SQL> CREATE TABLE transaction
  2  ( transaction_id		   NUMBER
  3    , transaction_account	     VARCHAR2(15) CONSTRAINT nn_transaction_1 NOT NULL
  4    , transaction_type	     NUMBER	  CONSTRAINT nn_transaction_2 NOT NULL
  5    , transaction_date	     DATE	  CONSTRAINT nn_transaction_3 NOT NULL
  6    , transaction_amount	     NUMBER	  CONSTRAINT nn_transaction_4 NOT NULL
  7    , rental_id		     NUMBER	  CONSTRAINT nn_transaction_5 NOT NULL
  8    , payment_method_type	     NUMBER	  CONSTRAINT nn_transaction_6 NOT NULL
  9    , payment_account_number      VARCHAR(19)  CONSTRAINT nn_transaction_7 NOT NULL
 10    , created_by		     NUMBER	  CONSTRAINT nn_transaction_8 NOT NULL
 11    , creation_date		     DATE	  CONSTRAINT nn_transaction_9 NOT NULL
 12    , last_updated_by	     NUMBER	  CONSTRAINT nn_transaction_10 NOT NULL
 13    , last_update_date	     DATE	  CONSTRAINT nn_transaction_11 NOT NULL
 14    , CONSTRAINT pk_transaction_id		  PRIMARY KEY(transaction_id)
 15    , CONSTRAINT fk_transaction_1		  FOREIGN KEY(transaction_type) REFERENCES common_lookup_lab(common_lookup_lab_id)
 16    , CONSTRAINT fk_transaction_2		  FOREIGN KEY(rental_id) REFERENCES rental_lab(rental_lab_id)
 17    , CONSTRAINT fk_transaction_3		  FOREIGN KEY(payment_method_type) REFERENCES common_lookup_lab(common_lookup_lab_id)
 18    , CONSTRAINT fk_transaction_4		  FOREIGN KEY(created_by) REFERENCES system_user(system_user_id)
 19    , CONSTRAINT fk_transaction_5		  FOREIGN KEY(last_updated_by) REFERENCES system_user(system_user_id));

Table created.

SQL> 
SQL> 
SQL> ------------------
SQL> CREATE SEQUENCE transaction_s1 START WITH 1 NOCACHE;

Sequence created.

SQL> 
SQL> -- Verification Step #1a
SQL> COLUMN table_name	 FORMAT A14  HEADING "Table Name"
SQL> COLUMN column_id	 FORMAT 9999 HEADING "Column ID"
SQL> COLUMN column_name  FORMAT A22  HEADING "Column Name"
SQL> COLUMN nullable	 FORMAT A8   HEADING "Nullable"
SQL> COLUMN data_type	 FORMAT A12  HEADING "Data Type"
SQL> SELECT   table_name
  2  ,	      column_id
  3  ,	      column_name
  4  ,	      CASE
  5  		WHEN nullable = 'N' THEN 'NOT NULL'
  6  		ELSE ''
  7  	      END AS nullable
  8  ,	      CASE
  9  		WHEN data_type IN ('CHAR','VARCHAR2','NUMBER') THEN
 10  		  data_type||'('||data_length||')'
 11  		ELSE
 12  		  data_type
 13  	      END AS data_type
 14  FROM     user_tab_columns
 15  WHERE    table_name = 'TRANSACTION'
 16  ORDER BY 2;

Table Name     Column ID Column Name            Nullable Data Type              
-------------- --------- ---------------------- -------- ------------           
TRANSACTION            1 TRANSACTION_ID         NOT NULL NUMBER(22)             
TRANSACTION            2 TRANSACTION_ACCOUNT    NOT NULL VARCHAR2(15)           
TRANSACTION            3 TRANSACTION_TYPE       NOT NULL NUMBER(22)             
TRANSACTION            4 TRANSACTION_DATE       NOT NULL DATE                   
TRANSACTION            5 TRANSACTION_AMOUNT     NOT NULL NUMBER(22)             
TRANSACTION            6 RENTAL_ID              NOT NULL NUMBER(22)             
TRANSACTION            7 PAYMENT_METHOD_TYPE    NOT NULL NUMBER(22)             
TRANSACTION            8 PAYMENT_ACCOUNT_NUMBER NOT NULL VARCHAR2(19)           
TRANSACTION            9 CREATED_BY             NOT NULL NUMBER(22)             
TRANSACTION           10 CREATION_DATE          NOT NULL DATE                   
TRANSACTION           11 LAST_UPDATED_BY        NOT NULL NUMBER(22)             
TRANSACTION           12 LAST_UPDATE_DATE       NOT NULL DATE                   

12 rows selected.

SQL> 
SQL> -- Step #1b - You create the NATURAL_KEY unique index as qualified below.
SQL> 
SQL> ------------------
SQL> CREATE UNIQUE INDEX natural_key
  2    ON transaction (
  3  	 rental_lab_id
  4  	 , transaction_type
  5  	 , transaction_date
  6  	 , payment_method_type
  7  	 , payment_account_number
  8  	 , transaction_account
  9    );
    rental_lab_id
    *
ERROR at line 3:
ORA-00904: "RENTAL_LAB_ID": invalid identifier 


SQL> 
SQL> 
SQL> -- Verification Step #1b
SQL> COLUMN table_name	     FORMAT A12  HEADING "Table Name"
SQL> COLUMN index_name	     FORMAT A16  HEADING "Index Name"
SQL> COLUMN uniqueness	     FORMAT A8	 HEADING "Unique"
SQL> COLUMN column_position  FORMAT 9999 HEADING "Column Position"
SQL> COLUMN column_name      FORMAT A24  HEADING "Column Name"
SQL> SELECT   i.table_name
  2  ,	      i.index_name
  3  ,	      i.uniqueness
  4  ,	      ic.column_position
  5  ,	      ic.column_name
  6  FROM     user_indexes i INNER JOIN user_ind_columns ic
  7  ON       i.index_name = ic.index_name
  8  WHERE    i.table_name = 'TRANSACTION'
  9  AND      i.uniqueness = 'UNIQUE'
 10  AND      i.index_name = 'NATURAL_KEY';

no rows selected

SQL> 
SQL> -- Step #2 - [2 points] Insert the following two TRANSACTION_TYPE rows and four PAYMENT_METHOD_TYPE rows into the COMMON_LOOKUP table. They should have valid who-audit column data.
SQL> 
SQL> INSERT INTO COMMON_LOOKUP_LAB VALUES
  2    ( common_lookup_lab_s1.nextval
  3  	 , 'CREDIT'
  4  	 , 'credit'
  5  	 , 1
  6  	 , SYSDATE
  7  	 , 1
  8  	 , SYSDATE
  9  	 , 'TRANSACTION'
 10  	 , 'TRANSACTION_TYPE'
 11  	 , 'CR'
 12    );

1 row created.

SQL> 
SQL> INSERT INTO COMMON_LOOKUP_LAB VALUES
  2    ( common_lookup_lab_s1.nextval
  3  	 , 'DEBIT'
  4  	 , 'debit'
  5  	 , 1
  6  	 , SYSDATE
  7  	 , 1
  8  	 , SYSDATE
  9  	 , 'TRANSACTION'
 10  	 , 'TRANSACTION_TYPE'
 11  	 , 'DR'
 12    );

1 row created.

SQL> 
SQL> INSERT INTO COMMON_LOOKUP_LAB VALUES
  2    ( common_lookup_lab_s1.nextval
  3  	 , 'DISCOVER_CARD'
  4  	 , 'Discover Card'
  5  	 , 1
  6  	 , SYSDATE
  7  	 , 1
  8  	 , SYSDATE
  9  	 , 'TRANSACTION'
 10  	 , 'PAYMENT_METHOD_TYPE'
 11  	 , NULL
 12    );

1 row created.

SQL> 
SQL> INSERT INTO COMMON_LOOKUP_LAB VALUES
  2    ( common_lookup_lab_s1.nextval
  3  	 , 'VISA_CARD'
  4  	 , 'Visa Card'
  5  	 , 1
  6  	 , SYSDATE
  7  	 , 1
  8  	 , SYSDATE
  9  	 , 'TRANSACTION'
 10  	 , 'PAYMENT_METHOD_TYPE'
 11  	 , NULL
 12    );

1 row created.

SQL> 
SQL> INSERT INTO COMMON_LOOKUP_LAB VALUES
  2    ( common_lookup_lab_s1.nextval
  3  	 , 'MASTER_CARD'
  4  	 , 'Master Card'
  5  	 , 1
  6  	 , SYSDATE
  7  	 , 1
  8  	 , SYSDATE
  9  	 , 'TRANSACTION'
 10  	 , 'PAYMENT_METHOD_TYPE'
 11  	 , NULL
 12    );

1 row created.

SQL> 
SQL> INSERT INTO COMMON_LOOKUP_LAB VALUES
  2    ( common_lookup_lab_s1.nextval
  3  	 , 'CASH'
  4  	 , 'cash'
  5  	 , 1
  6  	 , SYSDATE
  7  	 , 1
  8  	 , SYSDATE
  9  	 , 'TRANSACTION'
 10  	 , 'PAYMENT_METHOD_TYPE'
 11  	 , NULL
 12    );

1 row created.

SQL> 
SQL> 
SQL> -- Verification Step #2
SQL> COLUMN common_lookup_lab_table  FORMAT A20 HEADING "COMMON_LOOKUP_TABLE"
SQL> COLUMN common_lookup_lab_column FORMAT A20 HEADING "COMMON_LOOKUP_COLUMN"
SQL> COLUMN common_lookup_lab_type   FORMAT A20 HEADING "COMMON_LOOKUP_TYPE"
SQL> SELECT   common_lookup_lab_table
  2  ,	      common_lookup_lab_column
  3  ,	      common_lookup_lab_type
  4  FROM     common_lookup_lab
  5  WHERE    common_lookup_lab_table = 'TRANSACTION'
  6  AND      common_lookup_lab_column IN ('TRANSACTION_TYPE','PAYMENT_METHOD_TYPE')
  7  ORDER BY 1, 2, 3 DESC;

COMMON_LOOKUP_TABLE  COMMON_LOOKUP_COLUMN COMMON_LOOKUP_TYPE                    
-------------------- -------------------- --------------------                  
TRANSACTION          PAYMENT_METHOD_TYPE  VISA_CARD                             
TRANSACTION          PAYMENT_METHOD_TYPE  MASTER_CARD                           
TRANSACTION          PAYMENT_METHOD_TYPE  DISCOVER_CARD                         
TRANSACTION          PAYMENT_METHOD_TYPE  CASH                                  
TRANSACTION          TRANSACTION_TYPE     DEBIT                                 
TRANSACTION          TRANSACTION_TYPE     CREDIT                                

6 rows selected.

SQL> 
SQL> -- Step 3 - [14 points] Create the following AIRPORT and ACCOUNT_LIST tables as per the specification, but do so understanding the business logic of the model.
SQL> 
SQL> -- Step #3a - You need to create the AIRPORT table and the AIRPORT_S1 sequences.
SQL> CREATE TABLE airport
  2  ( airport_id		   NUMBER
  3  , airport_code		   VARCHAR2(3)	CONSTRAINT nn_airport_1 NOT NULL
  4  , airport_city		   VARCHAR2(30) CONSTRAINT nn_airport_2 NOT NULL
  5  , city			   VARCHAR2(30) CONSTRAINT nn_airport_3 NOT NULL
  6  , state_province		   VARCHAR2(30) CONSTRAINT nn_airport_4 NOT NULL
  7  , created_by		   NUMBER	CONSTRAINT nn_airport_5 NOT NULL
  8  , creation_date		   DATE 	CONSTRAINT nn_airport_6 NOT NULL
  9  , last_updated_by		   NUMBER	CONSTRAINT nn_airport_7 NOT NULL
 10  , last_update_date 	   DATE 	CONSTRAINT nn_airport_8 NOT NULL
 11  , CONSTRAINT pk_airport_id 	    PRIMARY KEY(airport_id)
 12  , CONSTRAINT fk_airport_1		    FOREIGN KEY(created_by) REFERENCES system_user(system_user_id)
 13  , CONSTRAINT fk_airport_2		    FOREIGN KEY(last_updated_by) REFERENCES system_user(system_user_id));

Table created.

SQL> 
SQL> ------------------
SQL> CREATE SEQUENCE airport_s1 START WITH 1 NOCACHE;

Sequence created.

SQL> 
SQL> -- Verification Step #3a
SQL> COLUMN table_name	 FORMAT A14  HEADING "Table Name"
SQL> COLUMN column_id	 FORMAT 9999 HEADING "Column ID"
SQL> COLUMN column_name  FORMAT A22  HEADING "Column Name"
SQL> COLUMN nullable	 FORMAT A8   HEADING "Nullable"
SQL> COLUMN data_type	 FORMAT A12  HEADING "Data Type"
SQL> SELECT   table_name
  2  ,	      column_id
  3  ,	      column_name
  4  ,	      CASE
  5  		WHEN nullable = 'N' THEN 'NOT NULL'
  6  		ELSE ''
  7  	      END AS nullable
  8  ,	      CASE
  9  		WHEN data_type IN ('CHAR','VARCHAR2','NUMBER') THEN
 10  		  data_type||'('||data_length||')'
 11  		ELSE
 12  		  data_type
 13  	      END AS data_type
 14  FROM     user_tab_columns
 15  WHERE    table_name = 'AIRPORT'
 16  ORDER BY 2;

Table Name     Column ID Column Name            Nullable Data Type              
-------------- --------- ---------------------- -------- ------------           
AIRPORT                1 AIRPORT_ID             NOT NULL NUMBER(22)             
AIRPORT                2 AIRPORT_CODE           NOT NULL VARCHAR2(3)            
AIRPORT                3 AIRPORT_CITY           NOT NULL VARCHAR2(30)           
AIRPORT                4 CITY                   NOT NULL VARCHAR2(30)           
AIRPORT                5 STATE_PROVINCE         NOT NULL VARCHAR2(30)           
AIRPORT                6 CREATED_BY             NOT NULL NUMBER(22)             
AIRPORT                7 CREATION_DATE          NOT NULL DATE                   
AIRPORT                8 LAST_UPDATED_BY        NOT NULL NUMBER(22)             
AIRPORT                9 LAST_UPDATE_DATE       NOT NULL DATE                   

9 rows selected.

SQL> 
SQL> -- Step #3b - You need to create a unique natural key (named NK_AIRPORT) index for the AIRPORT table. You should create it with the following four columns.
SQL> ------------------
SQL> CREATE UNIQUE INDEX nk_airport
  2    ON airport (
  3  	 airport_code
  4  	 , airport_city
  5  	 , city
  6  	 , state_province
  7    );

Index created.

SQL> 
SQL> -- Verification Step #3b
SQL> COLUMN table_name	     FORMAT A12  HEADING "Table Name"
SQL> COLUMN index_name	     FORMAT A16  HEADING "Index Name"
SQL> COLUMN uniqueness	     FORMAT A8	 HEADING "Unique"
SQL> COLUMN column_position  FORMAT 9999 HEADING "Column Position"
SQL> COLUMN column_name      FORMAT A24  HEADING "Column Name"
SQL> SELECT   i.table_name
  2  ,	      i.index_name
  3  ,	      i.uniqueness
  4  ,	      ic.column_position
  5  ,	      ic.column_name
  6  FROM     user_indexes i INNER JOIN user_ind_columns ic
  7  ON       i.index_name = ic.index_name
  8  WHERE    i.table_name = 'AIRPORT'
  9  AND      i.uniqueness = 'UNIQUE'
 10  AND      i.index_name = 'NK_AIRPORT';

Table Name   Index Name       Unique   Column Position Column Name              
------------ ---------------- -------- --------------- ------------------------ 
AIRPORT      NK_AIRPORT       UNIQUE                 1 AIRPORT_CODE             
AIRPORT      NK_AIRPORT       UNIQUE                 2 AIRPORT_CITY             
AIRPORT      NK_AIRPORT       UNIQUE                 3 CITY                     
AIRPORT      NK_AIRPORT       UNIQUE                 4 STATE_PROVINCE           

4 rows selected.

SQL> 
SQL> -- Step #3c - You need to seed the AIRPORT table with at least these cities, and any others that you’ve used for inserted values in the CONTACT table.
SQL> INSERT INTO airport VALUES
  2    (
  3  	   airport_s1.nextval
  4  	   , 'LAX'
  5  	   , 'Los angeles'
  6  	   , 'Los angeles'
  7  	   , 'California'
  8  	   , 1
  9  	   , SYSDATE
 10  	   , 1
 11  	   , SYSDATE
 12    );

1 row created.

SQL> 
SQL> INSERT INTO airport VALUES
  2    (
  3  	 airport_s1.nextval
  4  	 , 'SLC'
  5  	 , 'Salt Lake City'
  6  	 , 'Provo'
  7  	 , 'Utah'
  8  	 , 1
  9  	 , SYSDATE
 10  	 , 1
 11  	 , SYSDATE
 12    );

1 row created.

SQL> 
SQL> INSERT INTO airport VALUES
  2    (
  3  	 airport_s1.nextval
  4  	 , 'SLC'
  5  	 , 'Salt Lake City'
  6  	 , 'Spanish Fork'
  7  	 , 'Utah'
  8  	 , 1
  9  	 , SYSDATE
 10  	 , 1
 11  	 , SYSDATE
 12    );

1 row created.

SQL> 
SQL> INSERT INTO airport VALUES
  2    (
  3  	 airport_s1.nextval
  4  	 , 'SFO'
  5  	 , 'San Francisco'
  6  	 , 'San Francisco'
  7  	 , 'California'
  8  	 , 1
  9  	 , SYSDATE
 10  	 , 1
 11  	 , SYSDATE
 12    );

1 row created.

SQL> 
SQL> INSERT INTO airport VALUES
  2    (
  3  	 airport_s1.nextval
  4  	 , 'SJC'
  5  	 , 'San Jose'
  6  	 , 'San Jose'
  7  	 , 'California'
  8  	 , 1
  9  	 , SYSDATE
 10  	 , 1
 11  	 , SYSDATE
 12    );

1 row created.

SQL> 
SQL> INSERT INTO airport VALUES
  2    (
  3  	 airport_s1.nextval
  4  	 , 'SJC'
  5  	 , 'San Jose'
  6  	 , 'San Carlos'
  7  	 , 'California'
  8  	 , 1
  9  	 , SYSDATE
 10  	 , 1
 11  	 , SYSDATE
 12    );

1 row created.

SQL> 
SQL> -- Verification Step #3c
SQL> COLUMN code	   FORMAT A4  HEADING "Code"
SQL> COLUMN airport_city   FORMAT A14 HEADING "Airport City"
SQL> COLUMN city	   FORMAT A14 HEADING "City"
SQL> COLUMN state_province FORMAT A10 HEADING "State or|Province"
SQL> SELECT   airport_code AS code
  2  ,	      airport_city
  3  ,	      city
  4  ,	      state_province
  5  FROM     airport;

                                   State or                                     
Code Airport City   City           Province                                     
---- -------------- -------------- ----------                                   
LAX  Los angeles    Los angeles    California                                   
SFO  San Francisco  San Francisco  California                                   
SJC  San Jose       San Carlos     California                                   
SJC  San Jose       San Jose       California                                   
SLC  Salt Lake City Provo          Utah                                         
SLC  Salt Lake City Spanish Fork   Utah                                         

6 rows selected.

SQL> 
SQL> -- Step #3d - You need to create the ACCOUNT_LIST table and ACCOUNT_LIST_S1 sequence.
SQL> 
SQL> CREATE TABLE account_list
  2  ( account_list_id		     NUMBER
  3    , account_number 	     VARCHAR2(10) CONSTRAINT nn_account_list_1 NOT NULL
  4    , consumed_date		     DATE
  5    , consumed_by		     NUMBER
  6    , created_by		     NUMBER	  CONSTRAINT nn_account_list_2 NOT NULL
  7    , creation_date		     DATE	  CONSTRAINT nn_account_list_3 NOT NULL
  8    , last_updated_by	     NUMBER	  CONSTRAINT nn_account_list_4 NOT NULL
  9    , last_update_date	     DATE	  CONSTRAINT nn_account_list_5 NOT NULL
 10    , CONSTRAINT pk_account_list_id		   PRIMARY KEY(account_list_id)
 11    , CONSTRAINT fk_account_list_1		   FOREIGN KEY(consumed_by) REFERENCES system_user(system_user_id)
 12    , CONSTRAINT fk_account_list_2		   FOREIGN KEY(created_by) REFERENCES system_user(system_user_id)
 13    , CONSTRAINT fk_account_list_3		   FOREIGN KEY(last_updated_by) REFERENCES system_user(system_user_id));

Table created.

SQL> 
SQL> ------------------
SQL> CREATE SEQUENCE account_list_s1 START WITH 1 NOCACHE;

Sequence created.

SQL> 
SQL> 
SQL> -- Verification Step #3d
SQL> COLUMN table_name	 FORMAT A14
SQL> COLUMN column_id	 FORMAT 9999
SQL> COLUMN column_name  FORMAT A22
SQL> COLUMN data_type	 FORMAT A12
SQL> SELECT   table_name
  2  ,	      column_id
  3  ,	      column_name
  4  ,	      CASE
  5  		WHEN nullable = 'N' THEN 'NOT NULL'
  6  		ELSE ''
  7  	      END AS nullable
  8  ,	      CASE
  9  		WHEN data_type IN ('CHAR','VARCHAR2','NUMBER') THEN
 10  		  data_type||'('||data_length||')'
 11  		ELSE
 12  		  data_type
 13  	      END AS data_type
 14  FROM     user_tab_columns
 15  WHERE    table_name = 'ACCOUNT_LIST'
 16  ORDER BY 2;

Table Name     Column ID Column Name            Nullable Data Type              
-------------- --------- ---------------------- -------- ------------           
ACCOUNT_LIST           1 ACCOUNT_LIST_ID        NOT NULL NUMBER(22)             
ACCOUNT_LIST           2 ACCOUNT_NUMBER         NOT NULL VARCHAR2(10)           
ACCOUNT_LIST           3 CONSUMED_DATE                   DATE                   
ACCOUNT_LIST           4 CONSUMED_BY                     NUMBER(22)             
ACCOUNT_LIST           5 CREATED_BY             NOT NULL NUMBER(22)             
ACCOUNT_LIST           6 CREATION_DATE          NOT NULL DATE                   
ACCOUNT_LIST           7 LAST_UPDATED_BY        NOT NULL NUMBER(22)             
ACCOUNT_LIST           8 LAST_UPDATE_DATE       NOT NULL DATE                   

8 rows selected.

SQL> 
SQL> -- Step #3e - You need to seed the ACCOUNT_LIST table. This would take more time than leveraging a stored procedure but writing stored procedures from class is a beyond scope. Therefore, you’ve been provided with stored procedures for the databases. Click on the Setup Script to see how the procedure works, how to run the procedure, and how to check how many rows are inserted into the ACCOUNT_LIST table.
SQL> 
SQL> -- Create or replace seeding procedure.
SQL> CREATE OR REPLACE PROCEDURE seed_account_list IS
  2    /* Declare variable to capture table, and column. */
  3    lv_table_name   VARCHAR2(90);
  4    lv_column_name  VARCHAR2(30);
  5  
  6    /* Declare an exception variable and PRAGMA map. */
  7    not_null_column	EXCEPTION;
  8    PRAGMA EXCEPTION_INIT(not_null_column,-1400);
  9  
 10  BEGIN
 11    /* Set savepoint. */
 12    SAVEPOINT all_or_none;
 13  
 14    FOR i IN (SELECT DISTINCT airport_code FROM airport) LOOP
 15  	 FOR j IN 1..50 LOOP
 16  
 17  	   INSERT INTO account_list
 18  	   VALUES
 19  	   ( account_list_s1.NEXTVAL
 20  	   , i.airport_code||'-'||LPAD(j,6,'0')
 21  	   , NULL
 22  	   , NULL
 23  	   , 1002
 24  	   , SYSDATE
 25  	   , 1002
 26  	   , SYSDATE);
 27  	 END LOOP;
 28    END LOOP;
 29  
 30    /* Commit the writes as a group. */
 31    COMMIT;
 32  
 33  EXCEPTION
 34    WHEN not_null_column THEN
 35  	 /* Capture the table and column name that triggered the error. */
 36  	 lv_table_name := (TRIM(BOTH '"' FROM RTRIM(REGEXP_SUBSTR(SQLERRM,'".*\."',REGEXP_INSTR(SQLERRM,'\.',1,1)),'."')));
 37  	 lv_column_name := (TRIM(BOTH '"' FROM REGEXP_SUBSTR(SQLERRM,'".*"',REGEXP_INSTR(SQLERRM,'\.',1,2))));
 38  
 39  	 /* This undoes all DML statements to this point in the procedure. */
 40  	 ROLLBACK TO SAVEPOINT all_or_none;
 41  	 RAISE_APPLICATION_ERROR(
 42  	    -20001
 43  	   ,'Remove the NOT NULL contraint from the '||lv_column_name||' column in'||CHR(10)||' the '||lv_table_name||' table.');
 44    WHEN OTHERS THEN
 45  	 /* This undoes all DML statements to this point in the procedure. */
 46  	 ROLLBACK TO SAVEPOINT all_or_none;
 47  END;
 48  /

Procedure created.

SQL> 
SQL> SHOW ERRORS
No errors.
SQL> 
SQL> EXECUTE seed_account_list();

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Verification Step #3e
SQL> COLUMN object_name FORMAT A18
SQL> COLUMN object_type FORMAT A12
SQL> SELECT   object_name
  2  ,	      object_type
  3  FROM     user_objects
  4  WHERE    object_name = 'SEED_ACCOUNT_LIST';

OBJECT_NAME        OBJECT_TYPE                                                  
------------------ ------------                                                 
SEED_ACCOUNT_LIST  PROCEDURE                                                    

1 row selected.

SQL> 
SQL> COLUMN airport FORMAT A7
SQL> SELECT   SUBSTR(account_number,1,3) AS "Airport"
  2  ,	      COUNT(*) AS "# Accounts"
  3  FROM     account_list
  4  WHERE    consumed_date IS NULL
  5  GROUP BY SUBSTR(account_number,1,3)
  6  ORDER BY 1;

Airport # Accounts                                                              
------- ----------                                                              
LAX             50                                                              
SFO             50                                                              
SJC             50                                                              
SLC             50                                                              

4 rows selected.

SQL> 
SQL> -- Step #3f - In a prior lab and in both the create and seed scripts, the STATE_PROVINCE column values uses a mixture of US Postal Services state abbreviations and full state names. You need to update all STATE_PROVINCE values with their full state names because a subsequent seeding and the import program rely on full STATE_PROVINCE names. You need to update any pre-seeded US Postal Service state abbreviations with the full state names.
SQL> UPDATE address_lab
  2  SET    state_province = 'California'
  3  WHERE  state_province = 'CA';

7 rows updated.

SQL> 
SQL> -- Step #3g - You need to run the script that creates the UPDATE_MEMBER_ACCOUNT procedure, and then you need to call it to update values in the MEMBER and ACCOUNT_LIST tables. It relies on you having run the SEED_ACCOUNT_LIST procedure successfully.
SQL> CREATE OR REPLACE PROCEDURE update_member_account IS
  2  
  3    /* Declare a local variable. */
  4    lv_account_number VARCHAR2(10);
  5  
  6    /* Declare a SQL cursor fabricated from local variables. */
  7    CURSOR member_cursor IS
  8  	 SELECT   DISTINCT
  9  		  m.member_lab_id
 10  	 ,	  a.city
 11  	 ,	  a.state_province
 12  	 FROM	  member_lab m INNER JOIN contact_lab c
 13  	 ON	  m.member_lab_id = c.member_lab_id INNER JOIN address_lab a
 14  	 ON	  c.contact_lab_id = a.contact_lab_id
 15  	 ORDER BY m.member_lab_id;
 16  
 17  BEGIN
 18  
 19    /* Set savepoint. */
 20    SAVEPOINT all_or_none;
 21  
 22    /* Open a local cursor. */
 23    FOR i IN member_cursor LOOP
 24  
 25  	   /* Secure a unique account number as theyre consumed from the list. */
 26  	   SELECT al.account_number
 27  	   INTO   lv_account_number
 28  	   FROM   account_list al INNER JOIN airport ap
 29  	   ON	  SUBSTR(al.account_number,1,3) = ap.airport_code
 30  	   WHERE  ap.city = i.city
 31  	   AND	  ap.state_province = i.state_province
 32  	   AND	  consumed_by IS NULL
 33  	   AND	  consumed_date IS NULL
 34  	   AND	  ROWNUM < 2;
 35  
 36  	   /* Update a member with a unique account number linked to their nearest airport. */
 37  	   UPDATE member_lab
 38  	   SET	  account_number = lv_account_number
 39  	   WHERE  member_lab_id = i.member_lab_id;
 40  
 41  	   /* Mark consumed the last used account number. */
 42  	   UPDATE account_list
 43  	   SET	  consumed_by = 1002
 44  	   ,	  consumed_date = SYSDATE
 45  	   WHERE  account_number = lv_account_number;
 46  
 47    END LOOP;
 48  
 49    /* Commit the writes as a group. */
 50    COMMIT;
 51  
 52  EXCEPTION
 53    WHEN NO_DATA_FOUND THEN
 54  	 dbms_output.put_line('You have an error in your AIRPORT table inserts.');
 55  
 56  	 /* This undoes all DML statements to this point in the procedure. */
 57  	 ROLLBACK TO SAVEPOINT all_or_none;
 58    WHEN OTHERS THEN
 59  	 /* This undoes all DML statements to this point in the procedure. */
 60  	 ROLLBACK TO SAVEPOINT all_or_none;
 61  END;
 62  /

Procedure created.

SQL> 
SQL> SHOW ERRORS
No errors.
SQL> 
SQL> EXECUTE update_member_account();

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Verification Step #3g
SQL> COLUMN object_name FORMAT A22
SQL> COLUMN object_type FORMAT A12
SQL> SELECT   object_name
  2  ,	      object_type
  3  FROM     user_objects
  4  WHERE    object_name = 'UPDATE_MEMBER_ACCOUNT';

OBJECT_NAME            OBJECT_TYPE                                              
---------------------- ------------                                             
UPDATE_MEMBER_ACCOUNT  PROCEDURE                                                

1 row selected.

SQL> 
SQL> -- Format the SQL statement display.
SQL> COLUMN member_id	   FORMAT 999999 HEADING "Member|ID #"
SQL> COLUMN last_name	   FORMAT A7	 HEADING "Last|Name"
SQL> COLUMN account_number FORMAT A10	 HEADING "Account|Number"
SQL> COLUMN acity	   FORMAT A12	 HEADING "Address City"
SQL> COLUMN apstate	   FORMAT A10	 HEADING "Airport|State or|Province"
SQL> COLUMN alcode	   FORMAT A5	 HEADING "Airport|Account|Code"
SQL> 
SQL> -- Query distinct members and addresses.
SQL> SELECT   DISTINCT
  2  	      m.member_lab_id as member_id
  3  ,	      c.last_name
  4  ,	      m.account_number
  5  ,	      a.city AS acity
  6  ,	      ap.state_province AS apstate
  7  ,	      SUBSTR(al.account_number,1,3) AS alcode
  8  FROM     member_lab m INNER JOIN contact_lab c
  9  ON       m.member_lab_id = c.member_lab_id INNER JOIN address_lab a
 10  ON       c.contact_lab_id = a.contact_lab_id INNER JOIN airport ap
 11  ON       a.city = ap.city
 12  AND      a.state_province = ap.state_province INNER JOIN account_list al
 13  ON       ap.airport_code = SUBSTR(al.account_number,1,3)
 14  ORDER BY 1;

                                        Airport    Airpo                        
 Member Last    Account                 State or   Accou                        
   ID # Name    Number     Address City Province   Code                         
------- ------- ---------- ------------ ---------- -----                        
   1001 Winn    SJC-000001 San Jose     California SJC                          
   1002 Vizquel SJC-000002 San Jose     California SJC                          
   1003 Sweeney SJC-000003 San Jose     California SJC                          
   1004 Clinton SLC-000001 Provo        Utah       SLC                          
   1005 Moss    SLC-000002 Provo        Utah       SLC                          
   1006 Gretelz SLC-000003 Provo        Utah       SLC                          
   1007 Royal   SLC-000004 Provo        Utah       SLC                          
   1008 Smith   SLC-000005 Spanish Fork Utah       SLC                          
   1009 Potter  SLC-000006 Provo        Utah       SLC                          

9 rows selected.

SQL> 
SQL> -- Step #4 - [5 points] Create the following TRANSACTION_UPLOAD table as per the specification, but do so understanding the business logic of the model. As a BIG PICTURE, our video store just got a consolidation of rentals from a store that’s closed for our customers. We need to import the values and ensure that our source data agrees with the other store. For example, do all customer names, addresses, account numbers match our data. If they do, the merge should go well. If they don’t, the figures will ultimately be incorrect.
SQL> 
SQL> CREATE TABLE transaction_upload
  2  ( account_number	     VARCHAR2(10)
  3  , first_name	 VARCHAR2(20)
  4  , middle_name	 VARCHAR2(20)
  5  , last_name		 VARCHAR2(20)
  6  , check_out_date	     DATE
  7  , return_date	     DATE
  8  , rental_item_type      VARCHAR2(12)
  9  , transaction_type  VARCHAR2(14)
 10  , transaction_amount NUMBER
 11  , transaction_date      DATE
 12  , item_id			     NUMBER
 13  , payment_method_type VARCHAR2(14)
 14  , payment_account_number VARCHAR2(19))
 15    ORGANIZATION EXTERNAL
 16    ( TYPE ORACLE_LOADER
 17  	 DEFAULT DIRECTORY upload
 18  	 ACCESS PARAMETERS
 19  	 ( RECORDS DELIMITED BY NEWLINE CHARACTERSET US7ASCII
 20  	   BADFILE     'UPLOAD':'transaction_upload.bad'
 21  	   DISCARDFILE 'UPLOAD':'transaction_upload.dis'
 22  	   LOGFILE     'UPLOAD':'transaction_upload.log'
 23  	   FIELDS TERMINATED BY ','
 24  	   OPTIONALLY ENCLOSED BY "'"
 25  	   MISSING FIELD VALUES ARE NULL )
 26  	 LOCATION ('transaction_upload.csv'))
 27  REJECT LIMIT UNLIMITED;

Table created.

SQL> 
SQL> 
SQL> -- Verification Step #4
SQL> SELECT   COUNT(*) AS "External Rows"
  2  FROM     transaction_upload;

External Rows                                                                   
-------------                                                                   
        11520                                                                   

1 row selected.

SQL> 
SQL> SPOOL OFF

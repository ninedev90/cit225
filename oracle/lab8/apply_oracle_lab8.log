SQL> -- Step#1 [10 points] Using the query you developed in Step #4 of Lab #7, add the necessary columns to insert the values directly into the PRICE table. You need to create a PRICE_S sequence and call the sequence as a value in the SELECT-list. (HINT: You call the PRICE_S sequence like this PRICE_S.NEXTVAL inside the SELECT-list.)
SQL> -- Create sequence.
SQL> CREATE SEQUENCE price_lab_s START WITH 1 NOCACHE;

Sequence created.

SQL> 
SQL> INSERT INTO price_lab
  2  ( price_lab_id
  3  , item_lab_id
  4  , price_type
  5  , active_flag
  6  , start_date
  7  , end_date
  8  , amount
  9  , created_by
 10  , creation_date
 11  , last_updated_by
 12  , last_update_date)
 13  SELECT
 14  	     price_lab_s.nextval
 15  ,	     t.item_lab_id
 16  ,	     t.price_type
 17  ,	     t.active_flag
 18  ,	     t.start_date
 19  ,	     t.end_date
 20  ,	     t.amount
 21  ,	     1
 22  ,	     SYSDATE
 23  ,	     1
 24  ,	     SYSDATE
 25  FROM (
 26  	     SELECT   i.item_lab_id
 27  	     ,	      af.active_flag
 28  	     ,	      cl.common_lookup_lab_id as price_type
 29  	     ,	      cl.common_lookup_lab_type as price_desc
 30  	     ,	     case
 31  			     when af.active_flag = 'Y' AND (TRUNC(SYSDATE) - 30) >= i.release_date
 32  			     then i.release_date + 31
 33  			     else i.release_date
 34  		      end as start_date
 35  	     ,	     case
 36  			     when af.active_flag = 'N'
 37  			     then i.release_date + 30
 38  			     else null
 39  		      end as end_date
 40  	     ,	      case
 41  			     when af.active_flag = 'N' or (TRUNC(SYSDATE) - 30) < i.release_date
 42  			     then case
 43  				     when dr.rental_days = 1 then 3
 44  				     when dr.rental_days = 3 then 10
 45  				     when dr.rental_days = 5 then 15
 46  			     end
 47  			     else case
 48  				     when dr.rental_days = 1 then 1
 49  				     when dr.rental_days = 3 then 3
 50  				     when dr.rental_days = 5 then 5
 51  			     end
 52  		      end as amount
 53  	     FROM     item_lab i CROSS JOIN
 54  		     (SELECT 'Y' AS active_flag FROM dual
 55  		      UNION ALL
 56  		      SELECT 'N' AS active_flag FROM dual) af CROSS JOIN
 57  		     (SELECT '1' AS rental_days FROM dual
 58  		      UNION ALL
 59  		      SELECT '3' AS rental_days FROM dual
 60  		      UNION ALL
 61  		      SELECT '5' AS rental_days FROM dual) dr INNER JOIN
 62  		      common_lookup_lab cl ON dr.rental_days = SUBSTR(cl.common_lookup_lab_type,1,1)
 63  	     WHERE    cl.common_lookup_lab_table = 'PRICE_LAB'
 64  	     AND      cl.common_lookup_lab_column = 'PRICE_TYPE'
 65  	     AND not  (af.active_flag = 'N' and (TRUNC(SYSDATE) - 30) < i.release_date)
 66  	     ORDER BY 1, 2, 3
 67  ) t;

135 rows created.

SQL> 
SQL> -- Verification Step#1
SQL> SELECT  'OLD Y' AS "Type"
  2  ,	      COUNT(CASE WHEN amount = 1 THEN 1 END) AS "1-Day"
  3  ,	      COUNT(CASE WHEN amount = 3 THEN 1 END) AS "3-Day"
  4  ,	      COUNT(CASE WHEN amount = 5 THEN 1 END) AS "5-Day"
  5  ,	      COUNT(*) AS "TOTAL"
  6  FROM     price_lab p , item_lab i
  7  WHERE    active_flag = 'Y' AND i.item_lab_id = p.item_lab_id
  8  AND     (TRUNC(SYSDATE) - TRUNC(i.release_date)) > 30
  9  AND      end_date IS NULL
 10  UNION ALL
 11  SELECT  'OLD N' AS "Type"
 12  ,	      COUNT(CASE WHEN amount =	3 THEN 1 END) AS "1-Day"
 13  ,	      COUNT(CASE WHEN amount = 10 THEN 1 END) AS "3-Day"
 14  ,	      COUNT(CASE WHEN amount = 15 THEN 1 END) AS "5-Day"
 15  ,	      COUNT(*) AS "TOTAL"
 16  FROM     price_lab p , item_lab i
 17  WHERE    active_flag = 'N' AND i.item_lab_id = p.item_lab_id
 18  AND     (TRUNC(SYSDATE) - TRUNC(i.release_date)) > 30
 19  AND NOT end_date IS NULL
 20  UNION ALL
 21  SELECT  'NEW Y' AS "Type"
 22  ,	      COUNT(CASE WHEN amount =	3 THEN 1 END) AS "1-Day"
 23  ,	      COUNT(CASE WHEN amount = 10 THEN 1 END) AS "3-Day"
 24  ,	      COUNT(CASE WHEN amount = 15 THEN 1 END) AS "5-Day"
 25  ,	      COUNT(*) AS "TOTAL"
 26  FROM     price_lab p , item_lab i
 27  WHERE    active_flag = 'Y' AND i.item_lab_id = p.item_lab_id
 28  AND     (TRUNC(SYSDATE) - TRUNC(i.release_date)) < 31
 29  AND      end_date IS NULL
 30  UNION ALL
 31  SELECT  'NEW N' AS "Type"
 32  ,	      COUNT(CASE WHEN amount = 1 THEN 1 END) AS "1-Day"
 33  ,	      COUNT(CASE WHEN amount = 3 THEN 1 END) AS "3-Day"
 34  ,	      COUNT(CASE WHEN amount = 5 THEN 1 END) AS "5-Day"
 35  ,	      COUNT(*) AS "TOTAL"
 36  FROM     price_lab p , item_lab i
 37  WHERE    active_flag = 'N' AND i.item_lab_id = p.item_lab_id
 38  AND     (TRUNC(SYSDATE) - TRUNC(i.release_date)) < 31
 39  AND      NOT (end_date IS NULL);

Type       1-Day      3-Day      5-Day      TOTAL                               
----- ---------- ---------- ---------- ----------                               
OLD Y         21         21         21         63                               
OLD N         21         21         21         63                               
NEW Y          3          3          3          9                               
NEW N          0          0          0          0                               

4 rows selected.

SQL> 
SQL> -- Step#2 - [5 points] You should add the NOT NULL constraint to the PRICE_TYPE column of the PRICE table.
SQL> 
SQL> alter table price_lab
  2  modify (price_type Number constraint nn_price_lab_9 not null);

Table altered.

SQL> 
SQL> -- Verify Step#2
SQL> COLUMN CONSTRAINT FORMAT A10
SQL> SELECT   TABLE_NAME
  2  ,	      column_name
  3  ,	      CASE
  4  		WHEN NULLABLE = 'N' THEN 'NOT NULL'
  5  		ELSE 'NULLABLE'
  6  	      END AS CONSTRAINT
  7  FROM     user_tab_columns
  8  WHERE    TABLE_NAME = 'PRICE_LAB'
  9  AND      column_name = 'PRICE_TYPE';

TABLE NAME           COLUMN NAME          CONSTRAINT                            
-------------------- -------------------- ----------                            
PRICE_LAB            PRICE_TYPE           NOT NULL                              

1 row selected.

SQL> 
SQL> -- Step#3 - [5 points] The following query should update the RENTAL_ITEM_PRICE column for thirteen rows in the RENTAL_ITEM table. It should   return nine values of 5, and two values of 3, and one value of 1, 10 and 15 each. If it returns anything else, youâ€™ve encountered a failure. Like the other DML statements, this one contains a couple errors. You need to fix it before completing this step, and you can find the missing components in the diagnostic query below the UPDATE statement.
SQL> 
SQL> UPDATE   rental_item_lab ri
  2  SET      rental_item_lab_price =
  3  	       (SELECT	 p.amount
  4  		FROM	 price_lab p INNER JOIN common_lookup_lab cl1
  5  		ON	 p.price_type = cl1.common_lookup_lab_id CROSS JOIN rental_lab r
  6  			 CROSS JOIN common_lookup_lab cl2
  7  		WHERE	 p.item_lab_id = ri.item_lab_id
  8  		AND	 ri.rental_lab_id = r.rental_lab_id
  9  		AND	 ri.rental_item_lab_type = cl2.common_lookup_lab_id
 10  		AND	 cl1.common_lookup_lab_code = cl2.common_lookup_lab_code
 11  		AND	 r.check_out_date
 12  			   BETWEEN p.start_date AND NVL(p.end_date, TRUNC(SYSDATE)));

13 rows updated.

SQL> 
SQL> SPOOL OFF

-- ----------------------------------------------------------------------
-- Instructions:
-- ----------------------------------------------------------------------
-- The two scripts contain spooling commands, which is why there
-- isn't a spooling command in this script. When you run this file
-- you first connect to the Oracle database with this syntax:
--
--   sqlplus student/student@xe
--
-- Then, you call this script with the following syntax:
--
--   sql> @apply_oracle_lab8.sql
--
-- ----------------------------------------------------------------------

-- Run the prior lab script.
@/home/student/Data/cit225/oracle/lab7/apply_oracle_lab7.sql

SPOOL apply_oracle_lab8.log
-- Step#1 [10 points] Using the query you developed in Step #4 of Lab #7, add the necessary columns to insert the values directly into the PRICE table. You need to create a PRICE_S sequence and call the sequence as a value in the SELECT-list. (HINT: You call the PRICE_S sequence like this PRICE_S.NEXTVAL inside the SELECT-list.)
-- Create sequence.
CREATE SEQUENCE price_lab_s START WITH 1 NOCACHE;

INSERT INTO price_lab
( price_lab_id
, item_lab_id
, price_type
, active_flag
, start_date
, end_date
, amount
, created_by
, creation_date
, last_updated_by
, last_update_date)
SELECT  
        price_lab_s.nextval
,       t.item_lab_id
,       t.price_type
,       t.active_flag
,       t.start_date
,       t.end_date
,       t.amount
,       1            
,       SYSDATE      
,       1            
,       SYSDATE 
FROM (
        SELECT   i.item_lab_id
        ,        af.active_flag
        ,        cl.common_lookup_lab_id as price_type
        ,        cl.common_lookup_lab_type as price_desc
        ,       case 
                        when af.active_flag = 'Y' AND (TRUNC(SYSDATE) - 30) >= i.release_date
                        then i.release_date + 31 
                        else i.release_date 
                 end as start_date
        ,       case 
                        when af.active_flag = 'N'
                        then i.release_date + 30 
                        else null 
                 end as end_date
        ,        case 
                        when af.active_flag = 'N' or (TRUNC(SYSDATE) - 30) < i.release_date
                        then case
                                when dr.rental_days = 1 then 3
                                when dr.rental_days = 3 then 10
                                when dr.rental_days = 5 then 15
                        end
                        else case
                                when dr.rental_days = 1 then 1
                                when dr.rental_days = 3 then 3
                                when dr.rental_days = 5 then 5
                        end
                 end as amount
        FROM     item_lab i CROSS JOIN
                (SELECT 'Y' AS active_flag FROM dual
                 UNION ALL
                 SELECT 'N' AS active_flag FROM dual) af CROSS JOIN
                (SELECT '1' AS rental_days FROM dual
                 UNION ALL
                 SELECT '3' AS rental_days FROM dual 
                 UNION ALL
                 SELECT '5' AS rental_days FROM dual) dr INNER JOIN
                 common_lookup_lab cl ON dr.rental_days = SUBSTR(cl.common_lookup_lab_type,1,1)
        WHERE    cl.common_lookup_lab_table = 'PRICE_LAB'
        AND      cl.common_lookup_lab_column = 'PRICE_TYPE'
        AND not  (af.active_flag = 'N' and (TRUNC(SYSDATE) - 30) < i.release_date)
        ORDER BY 1, 2, 3
) t;

-- Verification Step#1
SELECT  'OLD Y' AS "Type"
,        COUNT(CASE WHEN amount = 1 THEN 1 END) AS "1-Day"
,        COUNT(CASE WHEN amount = 3 THEN 1 END) AS "3-Day"
,        COUNT(CASE WHEN amount = 5 THEN 1 END) AS "5-Day"
,        COUNT(*) AS "TOTAL"
FROM     price_lab p , item_lab i
WHERE    active_flag = 'Y' AND i.item_lab_id = p.item_lab_id
AND     (TRUNC(SYSDATE) - TRUNC(i.release_date)) > 30
AND      end_date IS NULL
UNION ALL
SELECT  'OLD N' AS "Type"
,        COUNT(CASE WHEN amount =  3 THEN 1 END) AS "1-Day"
,        COUNT(CASE WHEN amount = 10 THEN 1 END) AS "3-Day"
,        COUNT(CASE WHEN amount = 15 THEN 1 END) AS "5-Day"
,        COUNT(*) AS "TOTAL"
FROM     price_lab p , item_lab i
WHERE    active_flag = 'N' AND i.item_lab_id = p.item_lab_id
AND     (TRUNC(SYSDATE) - TRUNC(i.release_date)) > 30
AND NOT end_date IS NULL
UNION ALL
SELECT  'NEW Y' AS "Type"
,        COUNT(CASE WHEN amount =  3 THEN 1 END) AS "1-Day"
,        COUNT(CASE WHEN amount = 10 THEN 1 END) AS "3-Day"
,        COUNT(CASE WHEN amount = 15 THEN 1 END) AS "5-Day"
,        COUNT(*) AS "TOTAL"
FROM     price_lab p , item_lab i
WHERE    active_flag = 'Y' AND i.item_lab_id = p.item_lab_id
AND     (TRUNC(SYSDATE) - TRUNC(i.release_date)) < 31
AND      end_date IS NULL
UNION ALL
SELECT  'NEW N' AS "Type"
,        COUNT(CASE WHEN amount = 1 THEN 1 END) AS "1-Day"
,        COUNT(CASE WHEN amount = 3 THEN 1 END) AS "3-Day"
,        COUNT(CASE WHEN amount = 5 THEN 1 END) AS "5-Day"
,        COUNT(*) AS "TOTAL"
FROM     price_lab p , item_lab i
WHERE    active_flag = 'N' AND i.item_lab_id = p.item_lab_id
AND     (TRUNC(SYSDATE) - TRUNC(i.release_date)) < 31
AND      NOT (end_date IS NULL);

-- Step#2 - [5 points] You should add the NOT NULL constraint to the PRICE_TYPE column of the PRICE table.

alter table price_lab
modify (price_type Number constraint nn_price_lab_9 not null);

-- Verify Step#2
COLUMN CONSTRAINT FORMAT A10
SELECT   TABLE_NAME
,        column_name
,        CASE
           WHEN NULLABLE = 'N' THEN 'NOT NULL'
           ELSE 'NULLABLE'
         END AS CONSTRAINT
FROM     user_tab_columns
WHERE    TABLE_NAME = 'PRICE_LAB'
AND      column_name = 'PRICE_TYPE';

-- Step#3 - [5 points] The following query should update the RENTAL_ITEM_PRICE column for thirteen rows in the RENTAL_ITEM table. It should   return nine values of 5, and two values of 3, and one value of 1, 10 and 15 each. If it returns anything else, youâ€™ve encountered a failure. Like the other DML statements, this one contains a couple errors. You need to fix it before completing this step, and you can find the missing components in the diagnostic query below the UPDATE statement.

UPDATE   rental_item_lab ri
SET      rental_item_lab_price =
          (SELECT   p.amount
           FROM     price_lab p INNER JOIN common_lookup_lab cl1
           ON       p.price_type = cl1.common_lookup_lab_id CROSS JOIN rental_lab r
                    CROSS JOIN common_lookup_lab cl2 
           WHERE    p.item_lab_id = ri.item_lab_id
           AND      ri.rental_lab_id = r.rental_lab_id
           AND      ri.rental_item_lab_type = cl2.common_lookup_lab_id
           AND      cl1.common_lookup_lab_code = cl2.common_lookup_lab_code
           AND      r.check_out_date
                      BETWEEN p.start_date AND NVL(p.end_date, TRUNC(SYSDATE)));

-- Verification Step#3 
-- Widen the display console.
SET LINESIZE 120
 
-- Set the column display values.
COL customer_name          FORMAT A20  HEADING "Contact|--------|Customer Name"
COL contact_id             FORMAT 9999 HEADING "Contact|--------|Contact|ID #"
COL customer_id            FORMAT 9999 HEADING "Rental|--------|Customer|ID #"
COL r_rental_id            FORMAT 9999 HEADING "Rental|------|Rental|ID #"
COL ri_rental_id           FORMAT 9999 HEADING "Rental|Item|------|Rental|ID #"
COL rental_item_id         FORMAT 9999 HEADING "Rental|Item|------||ID #"
COL price_item_id          FORMAT 9999 HEADING "Price|------|Item|ID #"
COL rental_item_item_id    FORMAT 9999 HEADING "Rental|Item|------|Item|ID #"
COL rental_item_price      FORMAT 9999 HEADING "Rental|Item|------||Price"
COL amount                 FORMAT 9999 HEADING "Price|------||Amount"
COL price_type_code        FORMAT 9999 HEADING "Price|------|Type|Code"
COL rental_item_type_code  FORMAT 9999 HEADING "Rental|Item|------|Type|Code"
SELECT   c.last_name||', '||c.first_name
||       CASE
           WHEN c.middle_name IS NOT NULL THEN ' '||c.middle_name
         END AS customer_name
,        c.contact_lab_id
,        r.customer_id
,        r.rental_lab_id AS r_rental_id
,        ri.rental_lab_id AS ri_rental_id
,        ri.rental_item_lab_id
,        p.item_lab_id AS price_item_lab_id
,        ri.item_lab_id AS rental_item_item_id
,        ri.rental_item_lab_price
,        p.amount
,        TO_NUMBER(cl2.common_lookup_lab_code) AS price_type_code
,        TO_NUMBER(cl2.common_lookup_lab_code) AS rental_item_lab_type_code
FROM     price_lab p INNER JOIN common_lookup_lab cl1
ON       p.price_type = cl1.common_lookup_lab_id
AND      cl1.common_lookup_lab_table = 'PRICE_LAB'
AND      cl1.common_lookup_lab_column = 'PRICE_TYPE' FULL JOIN rental_item_lab ri 
ON       p.item_lab_id = ri.item_lab_id INNER JOIN common_lookup_lab cl2
ON       ri.rental_item_lab_type = cl2.common_lookup_lab_id
AND      cl2.common_lookup_lab_table = 'RENTAL_ITEM_LAB'
AND      cl2.common_lookup_lab_column = 'RENTAL_ITEM_LAB_TYPE' RIGHT JOIN rental_lab r
ON       ri.rental_lab_id = r.rental_lab_id FULL JOIN contact_lab c
ON       r.customer_id = c.contact_lab_id
WHERE    cl1.common_lookup_lab_code = cl2.common_lookup_lab_code
AND      r.check_out_date
BETWEEN  p.start_date AND NVL(p.end_date,TRUNC(SYSDATE) + 1)
ORDER BY 2, 3;
 
-- Reset the column display values to their default value.
SET LINESIZE 80

-- Step #4 - [5 points] Add a not null constraint to the RENTAL_ITEM_PRICE column of the RENTAL_ITEM table.

alter table rental_item_lab
modify (rental_item_lab_price Number constraint nn_rental_item_lab_7 not null);

--Verification Step#4
COLUMN CONSTRAINT FORMAT A10
SELECT   TABLE_NAME
,        column_name
,        CASE
           WHEN NULLABLE = 'N' THEN 'NOT NULL'
           ELSE 'NULLABLE'
         END AS CONSTRAINT
FROM     user_tab_columns
WHERE    TABLE_NAME = 'RENTAL_ITEM_LAB'
AND      column_name = 'RENTAL_ITEM_LAB_PRICE';

COMMIT;
